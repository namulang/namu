cmake_minimum_required (VERSION 3.5)
project(namu C CXX)

#defines:
set(SHOW_CMAKE_VARIABLES 1)
set(VERSION_MAJOR 0)
set(VERSION_MINOR 2)
set(VERSION_FIX 9)
set(BUILD_COUNT 1316)
set(VERSION_NAME "Mana")
set(VERSION_VALUE "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_FIX}")
set(VERSION "${PROJECT_NAME} ${UPDATE_NAME} v${VERSION_VALUE}")
#   build-date:
string(TIMESTAMP BUILD_DATE_YEAR "%Y")
string(TIMESTAMP BUILD_DATE_MONTH "%m")
string(TIMESTAMP BUILD_DATE_DAY "%d")
set(BUILD_DATE "${BUILD_DATE_DAY}-${BUILD_DATE_MONTH} ${BUILD_DATE_YEAR}")
string(TIMESTAMP BUILD_TIME_HOUR "%H")
string(TIMESTAMP BUILD_TIME_MINUTE "%M")
string(TIMESTAMP BUILD_TIME_SECOND "%S")
string(TIMESTAMP BUILD_TIME "${BUILD_TIME_HOUR}:${BUILD_TIME_MINUTE}:${BUILD_TIME_SECOND}")
set(BUILD_DATE_AND_TIME "${BUILD_DATE} ${BUILD_TIME}")

message("")
message("${VERSION}")
message(" on ${BUILD_DATE_AND_TIME}")
message("----------------------------------------")
message("")

message("\ninitialize CMake variables...")

IF(EMSCRIPTEN)
    set(CMAKE_C_COMPILER "emcc")
    set(CMAKE_CXX_COMPILER "emcc")
ENDIF(EMSCRIPTEN)

set(CXX_DEFINITIONS "${DEFINITIONS} -DUNICODE")
set(CMAKE_CXX_STANDARD 17)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

IF(CMAKE_SYSTEM_NAME STREQUAL Darwin OR CMAKE_SYSTEM_NAME STREQUAL Linux OR CMAKE_SYSTEM_NAME STREQUAL Emscripten)
    set(CMAKE_MACOSX_RPATH 1)

    # common flags:
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror -fdiagnostics-color=always")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-delete-null-pointer-checks -Wno-sign-compare -Wno-unused-parameter -Wno-address")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-local-typedefs -Wno-unused-function")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-gnu-zero-variadic-macro-arguments -Wno-undefined-bool-conversion -Wno-c++20-extensions")

    find_program(CLANGPP_PATH clang++)
    find_program(CLANG_PATH clang)
    IF(CLANGPP_PATH)
        set(CMAKE_CXX_COMPILER "${CLANGPP_PATH}")
        set(CMAKE_C_COMPILER "${CLANG_PATH}")

        # clang flags:
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-gnu-zero-variadic-macro-arguments -Wno-undefined-bool-conversion -Wno-c++20-extensions")

    ELSE(CLANGPP_PATH)

        # gcc flags:
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-dangling-reference") # False positive
        #   older gccs arbitrarily optimize away member variable initialization syntax in destructors that are supposed to handle
        #   allocation new/delete correctly. It's a sort of false positive, because it works fine in newer gccs.
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-lifetime-dse")

    ENDIF(CLANGPP_PATH)

    IF(COVERAGE_TOOL)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-instr-generate -fcoverage-mapping -fprofile-arcs -ftest-coverage") # supports both of llvm-cov and gcov
        add_compile_options(-fprofile-arcs -ftest-coverage)
        add_link_options(-fprofile-arcs -ftest-coverage)
    ENDIF(COVERAGE_TOOL)

    IF(EMSCRIPTEN)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -Wno-unused-const-variable -Wno-non-pod-varargs -Wno-unused-variable")
    ELSE(EMSCRIPTEN)
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -g -O0 -DNM_DEBUG -D_GLIBCXX_DEBUG")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O2")
    ENDIF(EMSCRIPTEN)

    IF(CMAKE_RELEASE_INCLUDE_DBG_INFO STREQUAL True)
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -g")
    ENDIF(CMAKE_RELEASE_INCLUDE_DBG_INFO STREQUAL True)
    if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
        set(CMAKE_SHARED_LINKER_FLAGS "-rpath .")
        set(CMAKE_EXE_LINKER_FLAGS "-rpath .")
        set(NM_LIBRARY_EXTENSION "dylib")
    ELSE(CMAKE_SYSTEM_NAME STREQUAL Darwin)
        IF(EMSCRIPTEN)
            set(NM_LIBRARY_EXTENSION "a")
        ELSE(EMSCRIPTEN)
            set(NM_LIBRARY_EXTENSION "so")
        ENDIF(EMSCRIPTEN)
    ENDIF(CMAKE_SYSTEM_NAME STREQUAL Darwin)
ENDIF(CMAKE_SYSTEM_NAME STREQUAL Darwin OR CMAKE_SYSTEM_NAME STREQUAL Linux OR CMAKE_SYSTEM_NAME STREQUAL Emscripten)
IF(CMAKE_SYSTEM_NAME STREQUAL Windows)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Zi /bigobj")
    set(defines -DWIN32)
    set(NM_LIBRARY_EXTENSION "dll")
ENDIF(CMAKE_SYSTEM_NAME STREQUAL Windows)

cmake_policy(SET CMP0015 NEW)
cmake_policy(SET CMP0042 NEW)


set(NM_PACK_EXTENSION "pack")
get_filename_component(NM_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)
set(NM_DEFAULT_INC_DIR
    ${NM_DIR}/module
    /usr/local/include)
include_directories(${NM_DEFAULT_INC_DIR})

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${NM_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${NM_DIR}/bin)
set(NM_PACK_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/pack)
set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} /usr/local/lib)

if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    set(CMAKE_IS_DBG 1)
else (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    set(CMAKE_IS_DBG 0)
endif (${CMAKE_BUILD_TYPE} STREQUAL Debug)

if(SHOW_CMAKE_VARIABLES)
    message(STATUS "CMAKE_FIND_LIBRARY_PREFIXES    " ${CMAKE_FIND_LIBRARY_PREFIXES})
    message(STATUS "CMAKE_FIND_LIBRARY_SUFFIXES    " ${CMAKE_FIND_LIBRARY_SUFFIXES})
    message(STATUS "CMAKE_THREAD_LIBS_INIT      " ${CMAKE_THREAD_LIBS_INIT})
    message(STATUS "CMAKE_BINARY_DIR:           " ${CMAKE_BINARY_DIR})
    message(STATUS "CMAKE_CURRENT_BINARY_DIR:   " ${CMAKE_CURRENT_BINARY_DIR})
    message(STATUS "CMAKE_SOURCE_DIR:           " ${CMAKE_SOURCE_DIR})
    message(STATUS "CMAKE_CURRENT_SOURCE_DIR:   " ${CMAKE_CURRENT_SOURCE_DIR})
    message(STATUS "PROJECT_BINARY_DIR:         " ${PROJECT_BINARY_DIR})
    message(STATUS "PROJECT_SOURCE_DIR:         " ${PROJECT_SOURCE_DIR})
    message(STATUS "EXECUTABLE_OUTPUT_PATH:     " ${EXECUTABLE_OUTPUT_PATH})
    message(STATUS "LIBRARY_OUTPUT_PATH:        " ${LIBRARY_OUTPUT_PATH})
    message(STATUS "CMAKE_MODULE_PATH:          " ${CMAKE_MODULE_PATH})
    message(STATUS "CMAKE_COMMAND:              " ${CMAKE_COMMAND})
    message(STATUS "CMAKE_ROOT:                 " ${CMAKE_ROOT})
    message(STATUS "CMAKE_CURRENT_LIST_FILE: " ${CMAKE_CURRENT_LIST_FILE})
    message(STATUS "CMAKE_CURRENT_LIST_LINE: " ${CMAKE_CURRENT_LIST_LINE})
    message(STATUS "CMAKE_INCLUDE_PATH: " ${CMAKE_INCLUDE_PATH})
    message(STATUS "CMAKE_LIBRARY_PATH: " ${CMAKE_LIBRARY_PATH})
    message(STATUS "CMAKE_SYSTEM: " ${CMAKE_SYSTEM})
    message(STATUS "CMAKE_SYSTEM_NAME: " ${CMAKE_SYSTEM_NAME})
    message(STATUS "CMAKE_SYSTEM_VERSION: " ${CMAKE_SYSTEM_VERSION})
    message(STATUS "CMAKE_SYSTEM_PROCESSOR: " ${CMAKE_SYSTEM_PROCESSOR})
    message(STATUS "UNIX: " ${UNIX})
    message(STATUS "WIN32: " ${WIN32})
    message(STATUS "APPLE: " ${APPLE})
    message(STATUS "MINGW: " ${MINGW})
    message(STATUS "CYGWIN: " ${CYGWIN})
    message(STATUS "BORLAND: " ${BORLAND})
    message(STATUS "MSVC: " ${MSVC})
    message(STATUS "MSVC_IDE: " ${MSVC_IDE})
    message(STATUS "MSVC60: " ${MSVC60})
    message(STATUS "MSVC70: " ${MSVC70})
    message(STATUS "MSVC71: " ${MSVC71})
    message(STATUS "MSVC80: " ${MSVC80})
    message(STATUS "CMAKE_COMPILER_2005: " ${CMAKE_COMPILER_2005})
    message(STATUS "CMAKE_SKIP_RULE_DEPENDENCY: " ${CMAKE_SKIP_RULE_DEPENDENCY})
    message(STATUS "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY: " ${CMAKE_SKIP_INSTALL_ALL_DEPENDENCY})
    message(STATUS "CMAKE_SKIP_RPATH: " ${CMAKE_SKIP_RPATH})
    message(STATUS "CMAKE_VERBOSE_MAKEFILE: " ${CMAKE_VERBOSE_MAKEFILE})
    message(STATUS "CMAKE_SUPPRESS_REGENERATION: " ${CMAKE_SUPPRESS_REGENERATION})
    message(STATUS "CMAKE_C_FLAGS: " ${CMAKE_C_FLAGS})
    message(STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS})
    message(STATUS "CMAKE_BUILD_TYPE: " ${CMAKE_BUILD_TYPE})
    message(STATUS "BUILD_SHARED_LIBS: " ${BUILD_SHARED_LIBS})
    message(STATUS "CMAKE_C_COMPILER: " ${CMAKE_C_COMPILER})
    message(STATUS "CMAKE_CXX_COMPILER: " ${CMAKE_CXX_COMPILER})
    message(STATUS "CMAKE_COMPILER_IS_GNUCC: " ${CMAKE_COMPILER_IS_GNUCC})
    message(STATUS "CMAKE_COMPILER_IS_GNUCXX : " ${CMAKE_COMPILER_IS_GNUCXX})
    message(STATUS "CMAKE_AR: " ${CMAKE_AR})
    message(STATUS "CMAKE_RANLIB: " ${CMAKE_RANLIB})
    message(STATUS "CMAKE_MACOSX_RPATH: " ${CMAKE_MACOSX_RPATH})
    message(STATUS "CMAKE_RELEASE_INCLUDE_DBG_INFO: " ${CMAKE_RELEASE_INCLUDE_DBG_INFO})
    message(STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS})
    message(STATUS "CMAKE_CXX_FLAGS_DEBUG: " ${CMAKE_CXX_FLAGS_DEBUG})
    message(STATUS "CMAKE_CXX_FLAGS_RELEASE: " ${CMAKE_CXX_FLAGS_RELEASE})
    message(STATUS "CXX_DEFINITIONS: " ${CXX_DEFINITIONS})
    message(STATUS "CMAKE_CXX_STANDARD: " {CMAKE_CXX_STANDARD})
    message(STATUS "builded outputs will be placed to ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    message(STATUS "built modules will be at ${NM_PACK_OUTPUT_DIRECTORY}")
    message(STATUS "all libraries extension is ${NM_LIBRARY_EXTENSION}")
    message(STATUS "world project directory is ${NM_DIR}")
    message(STATUS "default include directory is ${NM_DEFAULT_INC_DIR}")
endif(SHOW_CMAKE_VARIABLES)

add_definitions(${CXX_DEFINITIONS})
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../module ${CMAKE_CURRENT_BINARY_DIR}/module)
